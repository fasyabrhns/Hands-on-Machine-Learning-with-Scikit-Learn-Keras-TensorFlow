## The Machine Learning Landscape

Machine Learning (ML) is the science (and art) of programming computers so they can learn from data. It is defined as the field of study that gives computers the ability to learn without being explicitly programmed. A more engineering-oriented definition states: a computer program is said to learn from **experience E** with respect to some **task T** and some **performance measure P**, if its performance on T, as measured by P, improves with experience E.

The system learns from a **training set**, composed of **training instances** (or samples). For a spam filter, the task T is to flag spam, the experience E is the training data, and P could be **accuracy** (ratio of correctly classified emails).

---

## Why Use Machine Learning?

ML is valuable because it can solve problems too complex for traditional programming, adapt to **fluctuating environments**, and provide **insights** through **data mining**.

1. **Simplifying and Improving Code**: ML automatically learns patterns, making programs shorter, easier to maintain, and often more accurate than traditional rule-based approaches.  
   * Figure 1.1: [Insert Image Here]  
   * Figure 1.2: [Insert Image Here]  
2. **Automatic Adaptation**: An ML system automatically notices new patterns and adapts without manual updates.  
   * Figure 1.3: [Insert Image Here]  
3. **Complex Problems**: ML is essential for problems with no known algorithm.  
4. **Helping Humans Learn (Data Mining)**: Inspecting a trained ML model can reveal correlations or trends.  
   * Figure 1.4: [Insert Image Here]  

---

## Examples of Applications

| ML Task | Goal | Technique(s) |
| :--- | :--- | :--- |
| Image classification | Classifying products on a production line | CNNs |
| Semantic segmentation | Detecting tumors in brain scans | CNNs |
| Text classification (NLP) | Classifying news articles or offensive comments | RNNs, CNNs, Transformers |
| Text summarization (NLP) | Summarizing long documents | RNNs, CNNs, Transformers |
| Chatbots/Assistants | Creating conversational agents | NLU, question-answering |
| Regression | Forecasting revenue | Linear/Polynomial Regression, regression SVM, Random Forest, ANNs; RNNs, CNNs, Transformers for sequences |
| Speech recognition | React to voice commands | RNNs, CNNs, Transformers |
| Anomaly detection | Detecting credit card fraud | One-class SVM, Isolation Forest |
| Clustering | Segmenting clients based on purchases | K-Means, DBSCAN, HCA |
| Visualization/Dimensionality Reduction | Representing high-dimensional data | PCA, Kernel PCA, LLE, t-SNE |
| Recommender system | Recommending products | ANN |
| Intelligent game bot | AI bot for games | RL |

---

### Example Python Code: Training a Linear Model

```python
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import sklearn.linear_model

# Load the data
oecd_bli = pd.read_csv("oecd_bli_2015.csv", thousands=',')
gdp_per_capita = pd.read_csv("gdp_per_capita.csv", thousands=',', delimiter='\t',
                             encoding='latin1', na_values="n/a")

# Prepare the data
country_stats = prepare_country_stats(oecd_bli, gdp_per_capita)
X = np.c_[country_stats ["GDP per capita"]]
y = np.c_[country_stats["Life satisfaction"]]

# Visualize the data
country_stats.plot(kind='scatter', x="GDP per capita", y='Life satisfaction')
plt.show()

# Select a linear model
model = sklearn.linear_model.LinearRegression()

# Train the model
model.fit(X, y)

# Make a prediction for Cyprus
X_new = [[22587]] # Cyprus's GDP per capita
print(model.predict(X_new)) # outputs [[ 5.96242338]]
